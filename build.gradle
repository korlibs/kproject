import com.soywiz.korlibs.modules.SonatypeKt

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("com.gradle.publish:plugin-publish-plugin:1.2.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${libs.versions.kotlin.get()}")
    }
}

String forcedVersion = System.getenv('FORCED_VERSION')

subprojects {
    apply plugin: "java-gradle-plugin"
    apply plugin: "com.gradle.plugin-publish"
    apply plugin: "kotlin"
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }

    if (forcedVersion != null) {
        version = forcedVersion?.replace("refs/tags/v", "")?.replace("v", "") ?: project.version
    }

    def signingSecretKeyRingFile = System.getenv("ORG_GRADLE_PROJECT_signingSecretKeyRingFile") ?: project.findProperty("signing.secretKeyRingFile")?.toString()

// gpg --armor --export-secret-keys foobar@example.com | awk 'NR == 1 { print "signing.signingKey=" } 1' ORS='\\n'
    def signingKey = System.getenv("ORG_GRADLE_PROJECT_signingKey") ?: project.findProperty("signing.signingKey")?.toString()
    def signingPassword = System.getenv("ORG_GRADLE_PROJECT_signingPassword") ?: project.findProperty("signing.password")?.toString()

    if (signingSecretKeyRingFile != null || signingKey != null) {
        apply plugin: 'signing'
        signing {
            required { !project.version.endsWith('-SNAPSHOT') }
            if (signingKey != null) {
                useInMemoryPgpKeys(signingKey, signingPassword)
            }
            sign(publishing.publications)
        }
    }

    dependencies {
        testImplementation("junit:junit:4.13.2")
        testImplementation("org.jetbrains.kotlin:kotlin-test:${libs.versions.kotlin.get()}")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${libs.versions.kotlin.get()}")
    }

    def sonatypePublishUser = (System.getenv("SONATYPE_USERNAME") ?: rootProject.findProperty("SONATYPE_USERNAME")?.toString() ?: project.findProperty("sonatypeUsername")?.toString())
    def sonatypePublishPassword = (System.getenv("SONATYPE_PASSWORD") ?: rootProject.findProperty("SONATYPE_PASSWORD")?.toString() ?: project.findProperty("sonatypePassword")?.toString())

    if (sonatypePublishUser == null || sonatypePublishPassword == null) {
        println("Required sonatypeUsername and sonatypePassword in ~/.gradle/gradle.properties")
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set("javadoc")
    }

    test {
        testLogging {
            exceptionFormat = 'full'
            //events 'started', 'passed', 'skipped', 'failed'
            events 'failed'
            showStandardStreams = true
        }
    }

    publishing {
        repositories {
            if (sonatypePublishUser && sonatypePublishPassword) {
                def mvn = maven {
                    credentials {
                        username = sonatypePublishUser
                        password = sonatypePublishPassword
                    }
                    File stagedRepositoryIdRef = new File(rootProject.buildDir, "stagedRepositoryId.ref")
                    if (stagedRepositoryIdRef.exists()) {
                        url = uri("https://oss.sonatype.org/service/local/staging/deployByRepositoryId/${stagedRepositoryIdRef.text.trim()}/")
                    } else if (version.toString().contains("-SNAPSHOT")) {
                        url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                    } else {
                        url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                    }
                    println("Repository...$url")
                }
            }
        }
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version

                from components.java
            }
        }
        afterEvaluate {
            publications.withType(MavenPublication) {
                pom {
                    name = project.name
                    description = project.property("project.description")
                    url = project.property("project.scm.url")
                    developers {
                        developer {
                            id = project.property("project.author.id")
                            name = project.property("project.author.name")
                            email = project.property("project.author.email")
                        }
                    }
                    licenses {
                        license {
                            name = project.property("project.license.name")
                            url = project.property("project.license.url")
                        }
                    }
                    scm {
                        url = project.property("project.scm.url")
                    }
                }
            }
        }
    }
}

SonatypeKt.configureMavenCentralRelease(rootProject)
